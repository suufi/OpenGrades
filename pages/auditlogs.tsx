// @ts-nocheck
import type { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next'
import Head from 'next/head'


import { Container, Table, Title } from '@mantine/core'
import AuditLog from '../models/AuditLog'
import User from '../models/User'
import { IAuditLog } from '../types'
import mongoConnection from '../utils/mongoConnection'
// eslint-disable-next-line camelcase
import { Session } from 'next-auth'
import { getServerSession } from 'next-auth/next'
import authOptions from "pages/api/auth/[...nextauth]"

const AuditLogs: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ auditLogsProp }) => {
  return (
    <Container style={{ padding: 'var(--mantine-spacing-lg)' }}>
      <Head>
        <title>MIT OpenGrades</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <Title>
        Audit Log
      </Title>

      <Table>
        <Table.Thead>
          <Table.Tr>
            <Table.Th>Time</Table.Th>
            <Table.Th>Actor</Table.Th>
            <Table.Th>Action</Table.Th>
            <Table.Th>Description</Table.Th>
          </Table.Tr>
        </Table.Thead>
        <Table.Tbody>
          {auditLogsProp.map((auditLog: IAuditLog) => (
            <Table.Tr key={auditLog._id} style={{ width: '100%' }}>
              <Table.Td>{auditLog.createdAt.toString()}</Table.Td>
              <Table.Td>{auditLog.actor.name}</Table.Td>
              <Table.Td>{auditLog.type}</Table.Td>
              <Table.Td>{auditLog.description}</Table.Td>
            </Table.Tr>
          ))}
        </Table.Tbody>
      </Table>
    </Container >
  )
}

interface ServerSideProps {
  auditLogsProp: IAuditLog[]
}

export const getServerSideProps: GetServerSideProps<ServerSideProps> = async (context) => {
  await mongoConnection()

  const session: Session | null = await getServerSession(context.req, context.res, authOptions)

  if (session) {
    if (session.user && session.user?.email) {
      const user = await User.findOne({ email: session.user.email })
      if (user.trustLevel < 2) {
        return {
          redirect: {
            destination: '/',
            permanent: false
          }
        }
      }

      const auditLogs = await AuditLog.find({}).populate('actor').sort({ createdAt: -1 }).lean() as IAuditLog[]

      return {
        props: {
          auditLogsProp: JSON.parse(JSON.stringify(auditLogs))
        }
      }
    }
  }

  return {
    redirect: {
      destination: '/api/auth/signin',
      permanent: false
    }
  }
}

export default AuditLogs
